AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: >
  AWS SAM project to deploy a CDN for hosting static assets in private S3 buckets

Metadata:
  "AWS::ServerlessRepo::Application":
    Name: cloudfront-cdn
    Description: >
      AWS SAM project to deploy a CDN for hosting static assets in private S3 buckets
      Includes: S3 buckets, CloudFront distributions, Route53 record sets
    Author: smoketurner
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ["cdn", "cloudfront", "route53", "s3"]
    HomePageUrl: https://github.com/smoketurner/sam-cdn
    SemanticVersion: 1.2.0
    SourceCodeUrl: https://github.com/smoketurner/sam-cdn

  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Domain Configuration"
        Parameters:
          - DomainName
          - HostedZoneId
          - CreateRedirect
      - Label:
          default: "API Origin Configuration"
        Parameters:
          - ApiPath
          - ApiOriginDomainName
          - ApiOriginPath
          - ApiOriginKey
    ParameterLabels:
      CreateRedirect:
        default: "Redirect http(s)://www.<domain> to https://domain?"

Parameters:
  DomainName:
    Type: String
    Default: "example.com"
    Description: Domain name to use
  HostedZoneId:
    Type: "AWS::Route53::HostedZone::Id"
    Description: HostedZoneId for the Domain
  ApiPath:
    Type: String
    Default: "/api"
    Description: URI path to route to API
  ApiOriginDomainName:
    Type: String
    Default: "api.example.com"
    Description: API origin domain name
  ApiOriginPath:
    Type: String
    Default: ""
    Description: API origin path (must start with "/")
  ApiOriginKey:
    Type: String
    Default: "NO_API_KEY_SET"
    Description: x-api-key HTTP request header sent to API
  CreateRedirect:
    Type: String
    Default: "true"
    Description: Set to 'false' to not create the redirect CloudFront distribution
    AllowedValues:
      - "true"
      - "false"

Conditions:
  CreateRedirect: !Equals [!Ref CreateRedirect, "true"]

Rules:
  ValidateRegion:
    Assertions:
      - Assert: !Equals [!Ref "AWS::Region", "us-east-1"]
        AssertDescription: "Can only be deployed in the us-east-1 region"

Globals:
  Function:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
              - "edgelambda.amazonaws.com"
          Action: "sts:AssumeRole"
    AutoPublishAlias: live
    Handler: index.handler
    MemorySize: 128 # megabytes
    Runtime: nodejs12.x
    Timeout: 1 # secondes

Resources:
  DefaultIndexLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: src/handlers/default_index/
      Description: CloudFront origin-request default index handler

  WebSecurityLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: src/handlers/web_security/
      Description: CloudFront origin-response web security handler

  WebCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      CertificateTransparencyLoggingPreference: ENABLED
      DomainName: !Ref DomainName
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
        - !If
          - CreateRedirect
          - DomainName: !Sub "www.${DomainName}"
            HostedZoneId: !Ref HostedZoneId
          - !Ref "AWS::NoValue"
      SubjectAlternativeNames:
        - !Sub "*.${DomainName}"
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Ref DomainName

  LogBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Logs"

  WebBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Ref DomainName
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: !Sub "AWSLogs/${AWS::AccountId}/S3/${DomainName}/"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Ref DomainName

  WebBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: !Sub "${WebBucket.Arn}/*"

  RedirectBucket:
    Type: "AWS::S3::Bucket"
    Condition: CreateRedirect
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Ref WebBucket
          Protocol: https
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "www.${DomainName}"

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad" # Managed-CachingDisabled
            Compress: true
            OriginRequestPolicyId: "216adef6-5c7f-47e4-b989-5492eafa07d3" # Managed-AllViewer
            PathPattern: !Sub "${ApiPath}*"
            TargetOriginId: api
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: "/index.html"
          - ErrorCachingMinTTL: 0
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: "/index.html"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
          Compress: true
          OriginRequestPolicyId: "acba4595-bd28-49b8-b9fe-13317c0390fa" # Managed-UserAgentRefererHeaders
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: "origin-request"
              LambdaFunctionARN: !Ref DefaultIndexLambdaFunction.Version
            - EventType: "origin-response"
              LambdaFunctionARN: !Ref WebSecurityLambdaFunction.Version
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt LogBucket.DomainName
          IncludeCookies: false
          Prefix: !Sub "AWSLogs/${AWS::AccountId}/CloudFront/"
        Origins:
          - Id: api
            ConnectionAttempts: 3 # default
            ConnectionTimeout: 10 # seconds
            DomainName: !Ref ApiOriginDomainName
            OriginPath: !Ref ApiOriginPath
            OriginCustomHeaders:
              - HeaderName: "x-api-key"
                HeaderValue: !Ref ApiOriginKey
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - "TLSv1.2"
          - Id: s3
            ConnectionAttempts: 3 # default
            ConnectionTimeout: 10 # seconds
            DomainName: !GetAtt WebBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only

  RedirectCloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: CreateRedirect
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub "www.${DomainName}"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # Managed-CachingOptimized
          Compress: true
          OriginRequestPolicyId: "acba4595-bd28-49b8-b9fe-13317c0390fa" # Managed-UserAgentRefererHeaders
          TargetOriginId: s3
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: s3
            ConnectionAttempts: 3 # default
            ConnectionTimeout: 10 # seconds
            DomainName: !Sub "${RedirectBucket}.s3-website-${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: http-only # private bucket access only works over HTTP
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref WebCertificate
          MinimumProtocolVersion: TLSv1.2_2019
          SslSupportMethod: sni-only

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "CloudFront OAI"

  WebRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
          Name: !Ref DomainName
          Type: A
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
          Name: !Ref DomainName
          Type: AAAA

  RedirectRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Condition: CreateRedirect
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
          Name: !Sub "www.${DomainName}"
          Type: A
        - AliasTarget:
            DNSName: !GetAtt RedirectCloudFrontDistribution.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
          Name: !Sub "www.${DomainName}"
          Type: AAAA

Outputs:
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
  CloudFrontDomainName:
    Description: CloudFront Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
  CertificateArn:
    Description: SSL Certficate ARN
    Value: !Ref WebCertificate
